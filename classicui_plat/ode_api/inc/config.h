/* This file was autogenerated by Premake */
#ifndef _ODE_CONFIG_H_
#define _ODE_CONFIG_H_


/******************************************************************
 * CONFIGURATON SETTINGS - you can change these, and then rebuild
 *   ODE to modify the behavior of the library.
 ******************************************************************/

#define dSINGLE

#define dUSE_MALLOC_FOR_ALLOCA

#ifndef ODE_API
  #define ODE_API
#endif


/* Pull in the standard headers */
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <math.h>
#include <string.h>
//#include <float.h>


/* Define a value for infinity */
/*#define ODE_INFINITY4 1.7976931348623157E+308//HUGE_VALF

#define dInfinity ODE_INFINITY4
#define dEpsilon  FLT_EPSILON*/

typedef int             	int32;
typedef long long int 		int64;


/* An integer type that can be safely cast to a pointer. This definition
 * should be safe even on 64-bit systems */
typedef size_t intP;


/* The efficient alignment. most platforms align data structures to some
 * number of bytes, but this is not always the most efficient alignment.
 * for example, many x86 compilers align to 4 bytes, but on a pentium it is
 * important to align doubles to 8 byte boundaries (for speed), and the 4
 * floats in a SIMD register to 16 byte boundaries. many other platforms have
 * similar behavior. setting a larger alignment can waste a (very) small
 * amount of memory. NOTE: this number must be a power of two. */
#define EFFICIENT_ALIGNMENT 16

#endif
